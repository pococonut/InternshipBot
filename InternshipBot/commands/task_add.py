from create import dp
from aiogram import types
from aiogram.dispatcher import FSMContext
from db.commands import user_type, add_task
from aiogram.dispatcher.filters.state import StatesGroup, State
from keyboard import admin_ikb, worker_ikb, back_ikb, back_cont_task_ikb


FORM_task = """–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏:

<em>–ù–∞–∑–≤–∞–Ω–∏–µ
–¶–µ–ª—å
–û–ø–∏—Å–∞–Ω–∏–µ
–ó–∞–¥–∞—á–∏
–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
–ù–∞–≤—ã–∫–∏ –∏ —É–º–µ–Ω–∏—è, –ø–æ–ª—É—á–∞–µ–º—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π
–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</em>

<b>–æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</b>.
"""


class Task(StatesGroup):
    task_name = State()
    task_goal = State()
    task_description = State()
    task_tasks = State()
    task_technologies = State()
    task_new_skills = State()
    num_people = State()
    materials = State()


@dp.callback_query_handler(text='add_task')
async def add_t(callback: types.CallbackQuery):
    await callback.message.edit_text(FORM_task, parse_mode='HTML', reply_markup=back_cont_task_ikb)


@dp.callback_query_handler(text='continue_task', state="*")
async def cont_task_command(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–¥–∞—á–∏.
    """

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.", reply_markup=back_ikb)
    await Task.task_name.set()


@dp.message_handler(state=Task.task_name)
async def add_task_name(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ - –ù–∞–∑–≤–∞–Ω–∏–µ.
    """

    if len(message.text.split()) > 50:
        msg_text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <em>–ù–∞–∑–≤–∞–Ω–∏–µ</em> –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 50 —Å–ª–æ–≤'
        await message.answer(msg_text, parse_mode='HTML')
        return

    await state.update_data(task_name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å —Ä–∞–±–æ—Ç—ã.')
    await Task.next()


@dp.message_handler(state=Task.task_goal)
async def add_task_goal(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ - –¶–µ–ª—å –∑–∞–¥–∞—á–∏.
    """

    if len(message.text.split()) > 50:
        msg_text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <em>–¶–µ–ª—å –∑–∞–¥–∞—á–∏</em> –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 50 —Å–ª–æ–≤'
        await message.answer(msg_text, parse_mode='HTML')
        return

    await state.update_data(task_goal=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.')
    await Task.next()


@dp.message_handler(state=Task.task_description)
async def add_task_description(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ - –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    """

    if len(message.text.split()) > 200:
        msg_text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <em>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</em> –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 200 —Å–ª–æ–≤'
        await message.answer(msg_text, parse_mode='HTML')
        return

    await state.update_data(task_description=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã.')
    await Task.next()


@dp.message_handler(state=Task.task_tasks)
async def add_task_tasks(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ - –ü–æ–¥–∑–∞–¥–∞—á–∏.
    """

    if len(message.text.split()) > 500:
        msg_text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <em>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</em> –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 500 —Å–ª–æ–≤'
        await message.answer(msg_text, parse_mode='HTML')
        return

    await state.update_data(task_tasks=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.')
    await Task.next()


@dp.message_handler(state=Task.task_technologies)
async def add_task_technologies(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ - –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.
    """

    if len(message.text.split()) > 200:
        msg_text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <em>–ù–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</em> –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 200 —Å–ª–æ–≤'
        await message.answer(msg_text, parse_mode='HTML')
        return

    await state.update_data(task_technologies=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏, –ø–æ–ª—É—á–∞–µ–º—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏.')
    await Task.next()


@dp.message_handler(state=Task.task_new_skills)
async def add_task_new_skills(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ - –ù–∞–≤—ã–∫–∏, –ø–æ–ª—É—á–∞–µ–º—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏.
    """

    if len(message.text.split()) > 200:
        msg_text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <em>–ü–æ–ª—É—á–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏</em> –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 200 —Å–ª–æ–≤'
        await message.answer(msg_text, parse_mode='HTML')
        return

    await state.update_data(task_new_skills=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫.')
    await Task.next()


@dp.message_handler(state=Task.num_people)
async def add_task_num_people(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫.
    """

    if len(message.text.split()) > 1 or any(chr.isalpha() for chr in message.text):
        await message.answer('–ü–∞—Ä–∞–º–µ—Ç—Ä –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
        return

    if int(message.text) > 5:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 5 —á–µ–ª–æ–≤–µ–∫.')
        return

    await state.update_data(num_people=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.')
    await Task.next()


@dp.message_handler(state=Task.materials)
async def add_task_materials(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏ - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã.
    """

    if len(message.text.split()) > 200:
        msg_text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <em>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</em> –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 200 —Å–ª–æ–≤'
        await message.answer(msg_text, parse_mode='HTML')
        return

    await state.update_data(materials=str(message.text))
    data = await state.get_data()
    task = add_task(message.from_id, data)

    if task:
        u_type = user_type(message.from_user.id)[0]
        keyboard = worker_ikb if u_type == 'worker' else admin_ikb
        msg_text = f'üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞</b>\n\n' \
                   f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data["task_name"]}\n\n' \
                   f'<b>–¶–µ–ª—å:</b> {data["task_goal"]}\n\n' \
                   f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data["task_description"]}\n\n' \
                   f'<b>–ó–∞–¥–∞—á–∏:</b>\n{data["task_tasks"]}\n\n' \
                   f'<b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n{data["task_technologies"]}\n\n' \
                   f'<b>–ù–∞–≤—ã–∫–∏, –ø–æ–ª—É—á–∞–µ–º—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏:</b>\n{data["task_new_skills"]}\n\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:</b> {data["num_people"]}\n\n' \
                   f'<b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n{str(data["materials"])}'
        await message.answer(msg_text, parse_mode='HTML', reply_markup=keyboard, disable_web_page_preview=True)
    await state.finish()
