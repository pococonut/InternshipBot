from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from create import dp
from db.commands import add_user
from commands.get_menu import callback_check_authentication, message_check_authentication
from keyboard import back_ikb, types_users, admin_accounts_ikb


class Account(StatesGroup):
    login = State()
    password = State()
    type = State()


@dp.callback_query_handler(text='add_user')
@callback_check_authentication
async def add_user_command(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    """

    await callback.message.edit_text("–í–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–ª–æ–≥–∏–Ω.</b>", parse_mode='HTML', reply_markup=back_ikb)
    await Account.login.set()


@dp.message_handler(state=Account.login)
async def add_login(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ - –ü–∞—Ä–æ–ª—å.
    """

    await state.update_data(login=message.text)
    await message.answer('–í–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–ø–∞—Ä–æ–ª—å.</b>', parse_mode='HTML')
    await Account.next()


@dp.message_handler(state=Account.password)
async def add_password(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ - –õ–æ–≥–∏–Ω.
    """

    await state.update_data(password=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>', parse_mode='HTML', reply_markup=types_users)
    await Account.next()


@dp.callback_query_handler(text=['director', 'admin', 'worker'], state=Account.type)
async def add_type(callback: types.CallbackQuery, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ - –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–î–∏—Ä–µ–∫—Ç–æ—Ä, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –°—Ç—É–¥–µ–Ω—Ç, –°–æ—Ç—Ä—É–¥–Ω–∏–∫).
    """

    types_w = {'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
               'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
               'worker': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'}

    await state.update_data(type=callback.data)
    data = await state.get_data()
    added_user = add_user(data)

    if added_user:
        msg_text = f'üë®‚Äçüíº <b>–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n' \
                   f'<b>–õ–æ–≥–∏–Ω:</b> {data["login"]}\n\n' \
                   f'<b>–ü–∞—Ä–æ–ª—å:</b> {data["password"]}\n\n' \
                   f'<b>–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {types_w.get(data["type"])}'
    else:
        msg_text = '–í–≤–µ–¥–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'

    await callback.message.edit_text(msg_text, parse_mode='HTML', reply_markup=admin_accounts_ikb)
    await state.finish()
