"""from aiogram import Bot, Dispatcher, types

TOKEN_API = "6392143741:AAHR9cXnhECcoQdiJTrV37l7eRDTljnqmEQ"

bot = Bot(TOKEN_API)
dp = Dispatcher(bot)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
@dp.message_handler(commands=['picture'])
async def send_image(message: types.Message):
    await bot.send_photo(chat_id=message.from_user.id,
                         photo='https://avatars.mds.yandex.net/i?id=e3a09207c9a26de5f24e9405d36303e65e4269a6-9234742-images-thumbs&n=13')


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∫–µ—Ä–∞
@dp.message_handler(commands=['give'])
async def give_command(message: types.Message):
    await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEJjPdkoDIPMFK1HhHBqU-TAkjB8Uv5PgACOhYAAn-JAUh6cv99Dl9CzC8E")
    await message.delete()


# –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—à–µ–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —ç–º–æ–¥–∂–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Ç—É
@dp.message_handler()
async def send_emoji(message: types.Message):
    await message.reply(message.text + "üå∏")


# –æ—Ç–ø—Ä–∞–≤–∫–∞ id —Å—Ç–∏–∫–µ—Ä–∞
@dp.message_handler(content_types=['sticker'])
async def send_sticker_id(message: types.Message):
    await message.answer(message.sticker.file_id)


@dp.callback_query_handler()
async def reg_callback(callback: types.CallbackQuery):
    if callback.data == 'new':
        await callback.answer(text='–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')
    if callback.data == 'change':
        await callback.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å')
    if callback.data == 'show':
        await callback.answer(text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞:')"""

"""@dp.callback_query_handler(text='change')
async def reg_callback(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=change_ikb)
    await Changings.get_student_name.set()

    s_id = int(callback.from_user.id)


    @dp.callback_query_handler(text="student_name")
    async def f_callback(callback: types.CallbackQuery):
        await callback.message.edit_reply_markup()
        await callback.message.delete()

        print('FUUUUUUCKKK')
        # if callback.data == 'student_name':

        if select_student(s_id) is None:
            await callback.message.answer('–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', parse_mode='HTML')
        else:
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û', parse_mode='HTML')

            @dp.message_handler(state=Changings.get_student_name)
            async def txt1(message: types.Message, state: FSMContext):
                s_name = message.text
                print(s_name)
                if len(s_name.split()) != 3 or any(chr.isdigit() for chr in s_name) or any(
                        chr in string.punctuation for chr in s_name):
                    await callback.message.answer('–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                else:
                    change_stud_inform(s_id, callback.data, " ".join(i.capitalize() for i in s_name.split(' ')))
                    await callback.message.answer('–ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω', parse_mode='HTML')
                    await state.update_data(student_name=message.text)
                    await Changings.address.set()
                    print(s_name)


    @dp.callback_query_handler(text="university")
    async def f_callback(callback: types.CallbackQuery):
        await callback.message.edit_reply_markup()
        await callback.message.delete()

        if select_student(s_id) is None:
            await callback.message.answer('–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', parse_mode='HTML')
        else:
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –í–£–ó', parse_mode='HTML')

            @dp.message_handler(state=Changings.get_university)
            async def txt2(message: types.Message, state: FSMContext):
                university = message.text
                print(university)
                if len(university.split()) != 1 or any(chr.isdigit() for chr in university) or any(
                        chr in string.punctuation for chr in university):

                    await callback.message.answer('–í–£–ó –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                else:
                    change_stud_inform(s_id, callback.data, university.upper())
                    await callback.message.answer('–ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω', parse_mode='HTML')

                    print(university)
                    await state.update_data(university=message.text)
                    data = await state.get_data()
                    await message.answer(f"–ò–º—è: {data['student_name']}\n"
                                         f"–ê–¥—Ä–µ—Å: {data['university']}")

                    await state.finish()
"""

"""
@dp.callback_query_handler(text='university')
async def f_callback(callback: types.CallbackQuery):
    print('!!!!!!!! ', callback.data)
    s_id = int(callback.from_user.id)

    # print('FUUUUUUCKKK')
    # if callback.data == 'student_name':

    if select_student(s_id) is None:
        await callback.message.answer('–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', parse_mode='HTML')
    else:
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ', parse_mode='HTML')

        @dp.message_handler()
        async def txt1(message: types.Message):

            get_txt(message.text)
            print("get text", message.text)
            if message.text:
                if callback.data == 'university':
                    print('university: ', callback.data)

                    print('–ü–∞—Ä–∞–º–µ—Ç—Ä: ', callback.data)
                    if select_txt() != []:
                        ch[1] = select_txt()[0][0]
                        print(ch[0])
                        if (len(university.split()) != 1 or any(chr.isdigit() for chr in university) or any(
                                chr in string.punctuation for chr in university)):
                            await callback.message.answer('–í–£–ó –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                        else:
                            change_stud_inform(s_id, callback.data, university.upper())
                            await callback.message.answer('–ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω', parse_mode='HTML')
                            print("delete")
                            delete_txt()"""

"""case "input_again_btn":
            texting_from_keyboard(callback)
        case "no_answer_btn":
            texting_from_keyboard(callback)
        case "yes_answer_btn":
            find_dish_btn_clicked_keyboard(callback)
        case "input_ingr_again_btn":
            try_to_delete_lst_bot_msg(callback.message.chat.id)
            Clear_all_user_data_without_lst_mes_id(callback.message.chat.id)
            texting_from_keyboard(callback)

..............

@bot.message_handler(content_types='text')
def texting_from_keyboard(callback):
    try:
        try_to_delete_lst_bot_msg(callback.message.chat.id)
    except:
        pass
    msg = bot.send_message(callback.message.chat.id, '–í–≤–æ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é - "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –≥–æ–≤—è–¥–∏–Ω–∞...:"')
    bot.register_next_step_handler(msg, input_ingredients_from_keyboard)
    Set_LastMessageId_by_UserID(msg.id, callback.message.chat.id)


def input_ingredients_from_keyboard(message):
    lst_id = int(str(user_data_db.return_user_last_message_id(message.chat.id))[1:-2])
    ingr_to_db = procedure_check_user_ingr(str(message.text), message.chat.id)
    if ingr_to_db == False:
        markup = types.InlineKeyboardMarkup(row_width=1)
        input_again_btn = types.InlineKeyboardButton(text=f'–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ', callback_data='input_again_btn')
        markup.add(input_again_btn)
        bot.edit_message_text(chat_id=message.chat.id, message_id=lst_id, text=f'–ü–æ–ø—Ä–æ–±—É–π—Çe –≤–≤–µ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ {emoji.return_confused_face()}', reply_markup=markup)
        Set_LastMessageId_by_UserID(lst_id, message.chat.id)

    else:
        markup = types.InlineKeyboardMarkup(row_width=2)
        yes_answer_btn = types.InlineKeyboardButton(text=f'–î–∞{emoji.return_beaming_face_with_smiling_eyes()}', callback_data='yes_answer_btn')
        no_answer_btn = types.InlineKeyboardButton(text=f'–ù–µ—Ç{emoji.return_upside_down_face()}', callback_data='no_answer_btn')
        markup.add(yes_answer_btn, no_answer_btn)
        ingredients_to_show = str(user_data_db.return_user_Ingredients_Show_toQuerry(message.chat.id))[3:-4]
        bot.edit_message_text(chat_id=message.chat.id, message_id=lst_id, text=mes_to_user.confirm_the_ingredients()+str(f'{ingredients_to_show}'), reply_markup=markup)
        Set_LastMessageId_by_UserID(lst_id, message.chat.id)

        msg = bot.send_message(message.chat.id,
                               f'–°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π, –∞ —Ç–æ —è —É–∂–µ –≥—Ä–µ—é —Å–∫–æ–≤–æ—Ä–æ–¥–∫—É {emoji.return_pan_with_egg()}')
        Set_LastMessageId_by_UserID(msg.id, message.chat.id)"""

"""
lst = []
@dp.callback_query_handler(text='new')
async def reg_callback(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.message.delete()

    s_id = int(callback.from_user.id)
    if callback.data == 'new':
        # print(s_id)
        student_exist = select_student(s_id)
        if student_exist:
            await callback.message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', parse_mode='HTML', reply_markup=ikb_3)
            await callback.message.edit_reply_markup()
            await callback.message.delete()
        else:
            await callback.message.answer(FORM, parse_mode='HTML')
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û', parse_mode='HTML')

            @dp.message_handler()
            async def student_name(message: types.Message):

                if message.chat.type == 'private':
                    if len(lst) != 9:
                        txt = message.text
                        # lst.append(message.text)

                        if len(lst) == 8:
                            lst.append(txt)

                        if len(lst) == 7:
                            lst.append(txt)
                            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è', parse_mode='HTML')

                        if len(lst) == 6:
                            if any(chr.isalpha() for chr in txt) or any(
                                    chr in string.punctuation.replace('./', '') for chr in txt):
                                await callback.message.answer('–ì—Ä—É–ø–ø–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                            else:
                                lst.append(txt)
                                await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¢–µ–º—ã –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç', parse_mode='HTML')

                        if len(lst) == 5:
                            if any(chr.isalpha() for chr in txt) or any(chr in string.punctuation for chr in txt):
                                await callback.message.answer('–ö—É—Ä—Å –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                            else:
                                lst.append(txt)
                                await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ì—Ä—É–ø–ø—É', parse_mode='HTML')

                        if len(lst) == 4:
                            if any(chr.isdigit() for chr in txt) or any(chr in string.punctuation for chr in txt):
                                await callback.message.answer('–ö–∞—Ñ–µ–¥—Ä–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
                                                              parse_mode='HTML')
                            else:
                                lst.append(txt)
                                await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ö—É—Ä—Å', parse_mode='HTML')

                        if len(lst) == 3:
                            if any(chr.isdigit() for chr in txt) or any(chr in string.punctuation for chr in txt):
                                await callback.message.answer('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
                                                              parse_mode='HTML')
                            else:
                                lst.append(txt.capitalize())
                                await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ö–∞—Ñ–µ–¥—Ä—É', parse_mode='HTML')

                        if len(lst) == 2:
                            if any(chr.isdigit() for chr in txt) or any(chr in string.punctuation for chr in txt):
                                await callback.message.answer('–§–∞–∫—É–ª—å—Ç–µ—Ç –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
                                                              parse_mode='HTML')
                            else:
                                lst.append(txt.capitalize())
                                await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', parse_mode='HTML')

                        if len(lst) == 1:
                            if len(txt.split()) != 1 or any(chr.isdigit() for chr in txt) or any(
                                    chr in string.punctuation for chr in txt):
                                await callback.message.answer('–í–£–ó –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                            else:
                                lst.append(txt.upper())
                                await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –§–∞–∫—É–ª—å—Ç–µ—Ç', parse_mode='HTML')

                        if len(lst) == 0:
                            if len(txt.split()) != 3 or any(chr.isdigit() for chr in txt) or any(
                                    chr in string.punctuation for chr in txt):
                                await callback.message.answer('–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                            else:
                                lst.append(" ".join(i.capitalize() for i in txt.split(' ')))
                                await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –í–£–ó', parse_mode='HTML')

                        if len(lst) == 9:
                            await callback.message.answer(f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n'
                                                          f'{lst[0]}\n\n'
                                                          f'{lst[1]}\n\n'
                                                          f'{lst[2]}\n\n'
                                                          f'{lst[3]}\n\n'
                                                          f'{lst[4]}\n\n'
                                                          f'{lst[5]}\n\n'
                                                          f'{lst[6]}\n\n'
                                                          f'{lst[7]}\n\n'
                                                          f'{lst[8]}\n', parse_mode='HTML')
                            print(lst)
                            student = register_student(s_id, lst)
                            if student:
                                await callback.message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞.', parse_mode='HTML',
                                                              reply_markup=ikb_2)"""

"""
@dp.message_handler(filters.Text(startswith=["–æ—Ç–º–µ–Ω–∞", "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], ignore_case=True), state="*")
async def button_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:  
        await state.finish()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboards.users)"""

"""
@dp.callback_query_handler(text='student_name')
async def f_callback(callback: types.CallbackQuery):
    print('!!!!!!!! ', callback.data)
    s_id = int(callback.from_user.id)

    if select_student(s_id) is None:
        await callback.message.answer('–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', parse_mode='HTML')
    else:
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ', parse_mode='HTML')

        if callback.data == 'student_name':
            print('s_name: ', callback.data)

            print('–ü–∞—Ä–∞–º–µ—Ç—Ä: ', callback.data)

            if select_txt() != []:
                txt = select_txt()[0][0]
                print(txt)

                if (len(txt.split()) != 3 or any(chr.isdigit() for chr in txt) or any(
                        chr in string.punctuation for chr in txt)):
                    await callback.message.answer('–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                else:
                    change_stud_inform(s_id, callback.data, " ".join(i.capitalize() for i in txt.split(' ')))
                    await callback.message.answer('–ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω', parse_mode='HTML')
                    print("delete")
                    delete_txt()


@dp.callback_query_handler(text='university')
async def f_callback(callback: types.CallbackQuery):
    print('!!!!!!!! ', callback.data)
    s_id = int(callback.from_user.id)

    # print('FUUUUUUCKKK')
    # if callback.data == 'student_name':

    if select_student(s_id) is None:
        await callback.message.answer('–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', parse_mode='HTML')
    else:
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ', parse_mode='HTML')

        if callback.data == 'university':
            print('university: ', callback.data)

            print('–ü–∞—Ä–∞–º–µ—Ç—Ä: ', callback.data)

            if select_txt() != []:

                university = select_txt()[0][0]

                if (len(university.split()) != 1 or any(chr.isdigit() for chr in university) or any(
                        chr in string.punctuation for chr in university)):
                    await callback.message.answer('–í–£–ó –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
                else:
                    change_stud_inform(s_id, callback.data, university.upper())
                    await callback.message.answer('–ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω', parse_mode='HTML')
                    print(university)
                    """

"""
–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ <b>–æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</b>.

<b>–§–ò–û</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</em>

<b>–í–£–ó</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ö–£–ë–ì–£</em>

<b>–§–∞–∫—É–ª—å—Ç–µ—Ç</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏</em>

<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏</em>

<b>–ö–∞—Ñ–µ–¥—Ä–∞</b> (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: "–ù–µ—Ç") –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–í–ú–ò</em>

<b>–ö—É—Ä—Å</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>2</em>

<b>–ì—Ä—É–ø–ø–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>23/3</em>

<b>–¢–µ–º—ã –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç</b> (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: "–ù–µ—Ç") –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>1)–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞ –¥–ª—è –ö–£–ë–ì–£, 2)–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ç—Ä–∏—Ü</em>

<b>–í–∞—à–∏ –∑–Ω–∞–Ω–∏—è</b> (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: "–ù–µ—Ç") –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>Python, SQL, C++, JS</em>
"""

"""@dp.message_handler(commands=['change'])
async def change(message: types.Message):
    student_exist = select_student(message.from_user.id)
    if not student_exist:
        await message.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.', parse_mode='HTML')
    else:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n'
                             f'–§–ò–û - 1\n\n'
                             f'–í–£–ó - 2\n\n'
                             f'–§–∞–∫—É–ª—å—Ç–µ—Ç - 3\n\n'
                             f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - 4\n\n'
                             f'–ö–∞—Ñ–µ–¥—Ä–∞ - 5\n\n'
                             f'–ö—É—Ä—Å - 6\n\n'
                             f'–ì—Ä—É–ø–ø–∞ - 7\n\n'
                             f'–¢–µ–º—ã –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç - 8\n\n'
                             f'–í–∞—à–∏ –∑–Ω–∞–Ω–∏—è - 9\n\n',
                             reply_markup=back_ikb
                             )
        await Change_student.param.set()


@dp.callback_query_handler(text='back', state="*")
async def back_func(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_reply_markup()
    await callback.message.delete()
    await callback.message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')


@dp.message_handler(state=Change_student.param)
async def get_param(message: types.Message, state=FSMContext):
    if message.text not in chek_d:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    change_d['p'] = message.text
    print(message.text)
    await state.update_data(param=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    await Change_student.next()


@dp.message_handler(state=Change_student.new_val)
async def get_val(message: types.Message, state: FSMContext):
    if chek_param(change_d['p'], message.text) is False:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–º  —Ñ–æ—Ä–º–∞—Ç–µ.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return

    change_d['v'] = message.text
    await state.update_data(new_val=message.text)
    data = await state.get_data()
    await message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä: {chek_d.get(data['param'])[1]}\n\n"
                         f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {data['new_val']}")

    k = chek_d.get(data['param'])[0]
    v = data['new_val']
    change_stud_inform(message.from_user.id, k, v)

    await message.answer('–ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω.', parse_mode='HTML', reply_markup=ikb_3)  # reply_markup=ikb_2
    await state.finish()"""

"""
@dp.callback_query_handler(text='show')
async def reg_callback(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.message.delete()

    s_id = int(callback.from_user.id)
    user_show = select_user(s_id)
    print(user_show)
    if user_show.type == 'student':
        await callback.message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
                                      f"–§–ò–û: {user_show.student_name}\n\n"
                                      f"–í–£–ó: {user_show.university}\n\n"
                                      f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {user_show.faculty}\n\n"
                                      f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {user_show.specialties}\n\n"
                                      f"–ö–∞—Ñ–µ–¥—Ä–∞: {user_show.department}\n\n"
                                      f"–ö—É—Ä—Å: {user_show.course}\n\n"
                                      f"–ì—Ä—É–ø–ø–∞: {user_show.group}\n\n"
                                      f"–ö—É—Ä—Å–æ–≤—ã–µ: {user_show.coursework}\n\n"
                                      f"–ó–Ω–∞–Ω–∏—è: {user_show.knowledge}\n\n"
                                      f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_show.reg_date}\n\n"
                                      )
    elif user_show.type != 'student':
        await callback.message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
                                      f"–§–ò–û: {user_show.admin_name}\n\n")

    else:
        await callback.message.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                                      parse_mode='HTML')"""



page = 0


@dp.callback_query_handler(text='show_task')
async def show_task(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.message.delete()
    tasks = select_task()
    count_tasks = len(tasks)

    print(count_tasks)
    await callback.message.answer(f"<b>‚Ññ</b> {page + 1}/{count_tasks}\n\n"
                                  f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tasks[page].task_name}\n\n"
                                  f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tasks[page].task_description}\n\n"
                                  f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:</b> {tasks[page].num_people}\n\n"
                                  f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> {str(tasks[page].materials)}", parse_mode='HTML',
                                  reply_markup=task_ikb)


# f"<b>‚Ññ</b> {page+1}/{count_tasks}\n\n"


@dp.callback_query_handler(text='right')
async def right(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.message.delete()
    global page
    tasks = select_task()
    count_tasks = len(tasks)
    page += 1
    if page == count_tasks:
        page = 0
    await callback.message.answer(f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tasks[page].task_name}\n\n"
                                  f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tasks[page].task_description}\n\n"
                                  f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:</b> {tasks[page].num_people}\n\n"
                                  f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> {str(tasks[page].materials)}", parse_mode='HTML',
                                  reply_markup=task_ikb)


# f"<b>‚Ññ</b> {page+1}/{count_tasks}\n\n"


@dp.callback_query_handler(text='left')
async def left(callback: types.CallbackQuery):
    global page
    await callback.message.edit_reply_markup()
    await callback.message.delete()
    tasks = select_task()
    count_tasks = len(tasks)
    page -= 1
    if page == (-1) * count_tasks:
        page = 0
    await callback.message.answer(f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tasks[page].task_name}\n\n"
                                  f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tasks[page].task_description}\n\n"
                                  f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:</b> {tasks[page].num_people}\n\n"
                                  f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> {str(tasks[page].materials)}", parse_mode='HTML',
                                  reply_markup=task_ikb)


# f"<b>‚Ññ</b> {(page - count_tasks) + 1}/{count_tasks}\n\n"