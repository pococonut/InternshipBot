from db.commands import user_type, select_user
from aiogram import types, Dispatcher
from keyboard import change_user_ikb

# ----------------- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞\—Ä–∞–±–æ—Ç–Ω–∏–∫–∞ -----------------


def print_stud(s):
    stud = f"<b>–§–ò–û:</b> {s.student_name}\n\n" \
           f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {s.phone}\n\n" \
           f"<b>–í–£–ó:</b> {s.university}\n\n" \
           f"<b>–§–∞–∫—É–ª—å—Ç–µ—Ç:</b> {s.faculty}\n\n" \
           f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {s.specialties}\n\n" \
           f"<b>–ö–∞—Ñ–µ–¥—Ä–∞:</b> {s.department}\n\n" \
           f"<b>–ö—É—Ä—Å:</b> {s.course}\n\n" \
           f"<b>–ì—Ä—É–ø–ø–∞:</b> {s.group}\n\n" \
           f"<b>–ö—É—Ä—Å–æ–≤—ã–µ:</b> {s.coursework}\n\n" \
           f"<b>–ó–Ω–∞–Ω–∏—è:</b> {s.knowledge}\n\n" \
           f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {s.reg_date}\n"
    return stud


def print_worker(w):
    worker = f"<b>–§–ò–û:</b> {w.name}\n\n" \
             f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {w.phone}\n\n" \
             f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {w.reg_date}\n"
    return worker


def show_inf(t_id):
    s_id = int(t_id)
    user_show = select_user(s_id)
    u_type = user_type(s_id)
    if u_type is None:
        inf = None
    else:
        if u_type[0] == 'student':
            inf = print_stud(user_show)
        else:
            inf = print_worker(user_show)
    return inf


async def show_params(message: types.Message):
    inf = show_inf(message.from_user.id)
    if inf is None:
        await message.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
    else:
        await message.answer(f"üßë‚Äçüíª<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</b>\n\n" + inf, parse_mode='HTML', reply_markup=change_user_ikb)


async def show_params_inline(callback: types.CallbackQuery):
    inf = show_inf(callback.from_user.id)
    if inf is None:
        await callback.message.edit_text('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
    else:
        await callback.message.edit_text(f"üßë‚Äçüíª<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</b>\n\n" + inf, parse_mode='HTML', reply_markup=change_user_ikb)


def register_handlers_show(dp: Dispatcher):
    dp.register_message_handler(show_params, commands=['show'])
    dp.register_callback_query_handler(show_params_inline, text='show')