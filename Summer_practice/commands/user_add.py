from create import dp
from aiogram import types
from aiogram.dispatcher import FSMContext
from commands.general import ConfirmDeletion
from aiogram.dispatcher.filters.state import StatesGroup, State
from db.commands import add_user, select_added_users, del_added
from keyboard import back_ikb, types_users, add_usr, added_ikb, del_added_ikb, back_added_ikb, login_added_ikb


globalDict_added = dict()

types_w = {
    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
    'worker': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
}


class AddUser(StatesGroup):
    login = State()
    password = State()
    type = State()


def show_inf_added(a):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
    :param a: –°—Ç—Ä–æ–∫–∞ –º–æ–¥–µ–ª–∏ –ë–î, –æ—Ç–Ω–æ—Å—è—â–∞—è—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–º.
    :return: –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.
    """
    v = f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\\:* {a.name_usr if a.name_usr is not None else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n" \
        f"*–¢–∏–ø\\:* {a.type}\n\n" \
        f"*–õ–æ–≥–∏–Ω\\:* ||{a.login}||\n\n" \
        f"*–ü–∞—Ä–æ–ª—å\\:* ||{a.password}||\n\n"
    return v


@dp.callback_query_handler(text='add_user')
async def add_user_command(callback: types.CallbackQuery):
    await callback.message.edit_text("–í–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–ª–æ–≥–∏–Ω.</b>", parse_mode='HTML', reply_markup=back_ikb)
    await AddUser.login.set()


@dp.callback_query_handler(state=AddUser.login)
async def add_login(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ - –ü–∞—Ä–æ–ª—å.
    """
    await state.update_data(login=message.text)
    await message.answer('–í–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–ø–∞—Ä–æ–ª—å.</b>', parse_mode='HTML')
    await AddUser.next()


@dp.callback_query_handler(state=AddUser.password)
async def add_password(message: types.Message, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ - –õ–æ–≥–∏–Ω.
    """
    await state.update_data(password=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>', parse_mode='HTML', reply_markup=types_users)
    await AddUser.next()


@dp.callback_query_handler(text=['director', 'admin', 'worker'], state=AddUser.type)
async def add_type(callback: types.CallbackQuery, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ - –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–î–∏—Ä–µ–∫—Ç–æ—Ä, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –°—Ç—É–¥–µ–Ω—Ç, –°–æ—Ç—Ä—É–¥–Ω–∏–∫).
    """
    await state.update_data(type=callback.data)
    data = await state.get_data()
    added_user = add_user(data)

    if added_user:
        await callback.message.edit_text(f'üë®‚Äçüíº *–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\\ *\n\n'
                                         f'*–õ–æ–≥–∏–Ω\\:* ||{data["login"]}||\n\n'
                                         f'*–ü–∞—Ä–æ–ª—å\\:* ||{data["password"]}||\n\n'
                                         f'*–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\:* {types_w.get(data["type"])}\n\n',
                                         parse_mode='MarkdownV2', reply_markup=add_usr)
        await state.finish()
    else:
        await callback.message.edit_text(f'–í–≤–µ–¥–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_markup=add_usr)
        await state.finish()


@dp.callback_query_handler(text=["show_add_user", "left_added", "right_added"])
async def show_added(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
    """
    added_users = select_added_users()
    if not added_users:
        # !!! –¥–æ–ø–æ–ª–Ω–∏—Ç—å
        await callback.message.edit_text('–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.', reply_markup=add_usr)
        await callback.answer()
    else:
        usr_id = str(callback.from_user.id)
        count_added = len(added_users)

        if usr_id not in globalDict_added:
            globalDict_added[usr_id] = 0

        if callback.data == 'show_add_user':
            a = globalDict_added[usr_id]
            if globalDict_added[usr_id] <= -1:
                a = count_added + globalDict_added[usr_id]
            count_added = len(added_users)

            if added_users[a].name_usr is not None:
                keyboard = login_added_ikb
            else:
                keyboard = added_ikb

            await callback.message.edit_text(f"*‚Ññ\\ *{a + 1}/{count_added}\n\n" + show_inf_added(added_users[a]),
                                             parse_mode='MarkdownV2',
                                             reply_markup=keyboard,
                                             disable_web_page_preview=True)
        else:
            if callback.data == 'right_added':
                globalDict_added[usr_id] += 1
                if globalDict_added[usr_id] == count_added:
                    globalDict_added[usr_id] = 0
                a_r = globalDict_added[usr_id]
                if globalDict_added[usr_id] <= -1:
                    a_r = count_added + globalDict_added[usr_id]
                s = f"*‚Ññ\\ *{a_r + 1}/{count_added}\n\n"

            if callback.data == 'left_added':
                globalDict_added[usr_id] -= 1
                a_l = 0
                if globalDict_added[usr_id] == (-1) * count_added:
                    globalDict_added[usr_id] = 0
                if globalDict_added[usr_id] <= -1:
                    a_l = count_added
                s = f"*‚Ññ\\ *{(a_l + globalDict_added[usr_id]) + 1}/{count_added}\n\n"

            if added_users[globalDict_added[usr_id]].name_usr is not None:
                keyboard = login_added_ikb
            else:
                keyboard = added_ikb
            await callback.message.edit_text(s + show_inf_added(added_users[globalDict_added[usr_id]]),
                                             parse_mode='MarkdownV2',
                                             reply_markup=keyboard,
                                             disable_web_page_preview=True)


@dp.callback_query_handler(text='del_added')
async def del_a(callback: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    await callback.message.edit_reply_markup()
    usr_id = str(callback.from_user.id)
    print("delete ", globalDict_added[usr_id] + 1)
    await callback.message.answer('–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?', parse_mode='HTML', reply_markup=del_added_ikb)
    await ConfirmDeletion.delete.set()


@dp.callback_query_handler(text='del_a_yes', state=ConfirmDeletion.delete)
async def del_a_yes(callback: types.CallbackQuery, state=FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    await state.update_data(delete=callback.data)
    added = select_added_users()
    usr_id = str(callback.from_user.id)
    a_id = added[globalDict_added[usr_id]].id
    del_added(a_id)
    await state.finish()
    await callback.message.edit_text('–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã', parse_mode='HTML', reply_markup=back_added_ikb)