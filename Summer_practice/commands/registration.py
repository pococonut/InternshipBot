from commands.back import back_func
from db.commands import user_type, stud_approve, select_user, register_student
from keyboard import back_cont_ikb, admin_ikb, worker_ikb, stud_is_approve, ikb_3, back_ikb
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import string
import re


FORM = """
–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–º–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:

<em>–§–ò–û
–í–£–ó
–§–∞–∫—É–ª—å—Ç–µ—Ç
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
–ö–∞—Ñ–µ–¥—Ä–∞
–ö—É—Ä—Å
–ì—Ä—É–ø–ø–∞
–¢–µ–º—ã –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç
–í–∞—à–∏ –∑–Ω–∞–Ω–∏—è</em>

<b>–æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</b>.
"""

# ---------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\–ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ----------------


class Student(StatesGroup):
    student_name = State()
    university = State()
    faculty = State()
    specialties = State()
    department = State()
    course = State()
    group = State()
    coursework = State()
    knowledge = State()


async def registration_command(message: types.Message):
    user_exist = user_type(message.from_user.id)
    if not user_exist:
        await message.answer(FORM, parse_mode='HTML',
                             reply_markup=back_cont_ikb)
    else:
        usr = {'student': '—Å—Ç—É–¥–µ–Ω—Ç',
               'admin': '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
               'director': '–¥–∏—Ä–µ–∫—Ç–æ—Ä',
               'worker': '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'}

        if user_exist[0] in ('admin', 'director'):
            keyboard = admin_ikb
        elif user_exist[0] == 'worker':
            keyboard = worker_ikb
        elif user_exist[0] == 'student':
            approve = stud_approve(message.from_user.id)
            if approve is not None and approve[0]:
                keyboard = stud_is_approve
                print(user_exist[0])
                print(approve)
            else:
                keyboard = ikb_3
        print(user_exist[0])
        await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{usr.get(user_exist[0])}</b>.', parse_mode='HTML',
                             reply_markup=keyboard)


async def cont_command(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ <b>–§–ò–û</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</em>",
                                     parse_mode='HTML', reply_markup=back_ikb)
    await Student.student_name.set()


async def get_student_name(message: types.Message, state: FSMContext):
    student_exist = select_user(message.from_user.id)
    if student_exist:
        await state.finish()
        await state.reset_state(with_data=False)
    else:
        if len(message.text.split()) != 3 or any(chr.isdigit() for chr in message.text) or any(
                chr in string.punctuation for chr in message.text):
            await message.answer('–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
            return
        await state.update_data(student_name=" ".join([i.capitalize() for i in message.text.split()]))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–í–£–ó</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ö–£–ë–ì–£</em>", parse_mode='HTML')
        await Student.next()


async def get_university(message: types.Message, state=FSMContext):
    if len(message.text.split()) != 1 or any(chr.isdigit() for chr in message.text) or any(
            chr in string.punctuation for chr in message.text):
        await message.answer('–í–£–ó –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
        return
    await state.update_data(university=message.text.upper())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–§–∞–∫—É–ª—å—Ç–µ—Ç</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏</em>",
                         parse_mode='HTML')
    await Student.next()


async def get_faculty(message: types.Message, state=FSMContext):
    if any(chr.isdigit() for chr in message.text) or any(chr in string.punctuation for chr in message.text):
        await message.answer('–§–∞–∫—É–ª—å—Ç–µ—Ç –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
        return
    await state.update_data(faculty=message.text.capitalize())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –º–µ—Ö–∞–Ω–∏–∫–∞</em>",
                         parse_mode='HTML')
    await Student.next()


async def get_specialties(message: types.Message, state=FSMContext):
    if any(chr.isdigit() for chr in message.text) or any(chr in string.punctuation for chr in message.text):
        await message.answer('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
        return
    await state.update_data(specialties=message.text.capitalize())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ö–∞—Ñ–µ–¥—Ä—É</b> (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: '–ù–µ—Ç') –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>–í–ú–ò</em>",
                         parse_mode='HTML')
    await Student.next()


async def get_department(message: types.Message, state=FSMContext):
    if any(chr.isdigit() for chr in message.text) or any(chr in string.punctuation for chr in message.text):
        await message.answer('–ö–∞—Ñ–µ–¥—Ä–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
        return
    await state.update_data(department=message.text.upper())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ö—É—Ä—Å</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>2</em>", parse_mode='HTML')
    await Student.next()


async def get_course(message: types.Message, state=FSMContext):
    if len(message.text) != 1 or any(chr.isalpha() for chr in message.text) or any(
            chr in string.punctuation for chr in message.text):
        await message.answer('–ö—É—Ä—Å –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
        return
    await state.update_data(course=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ì—Ä—É–ø–ø—É</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>23/3</em>", parse_mode='HTML')
    await Student.next()


async def get_group(message: types.Message, state=FSMContext):
    if (re.fullmatch('\d{,3}\D\d', message.text) is None) or any(chr.isalpha() for chr in message.text) or any(
            chr in string.punctuation.replace('/', '') for chr in message.text) or ' ' in message.text:
        await message.answer('–ì—Ä—É–ø–ø–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', parse_mode='HTML')
        return
    await state.update_data(group=message.text)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ <b>–¢–µ–º—ã –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç</b> (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: "–ù–µ—Ç") –≤ —Ñ–æ—Ä–º–∞—Ç–µ:'
        ' <em>1)–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞ –¥–ª—è –ö–£–ë–ì–£, 2)–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ç—Ä–∏—Ü</em>',
        parse_mode='HTML')
    await Student.next()


async def get_coursework(message: types.Message, state=FSMContext):
    await state.update_data(coursework=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–í–∞—à–∏ –∑–Ω–∞–Ω–∏—è</b> (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: '–ù–µ—Ç') –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <em>Python, SQL, C++, JS</em>",
        parse_mode='HTML')
    await Student.next()


async def get_knowledge(message: types.Message, state=FSMContext):
    await state.update_data(knowledge=message.text)
    data = await state.get_data()
    await message.answer(f"üßë‚Äçüíª<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
                         f"<b>–§–ò–û:</b> {data['student_name']}\n\n"
                         f"<b>–í–£–ó:</b> {data['university']}\n\n"
                         f"<b>–§–∞–∫—É–ª—å—Ç–µ—Ç:</b> {data['faculty']}\n\n"
                         f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {data['specialties']}\n\n"
                         f"<b>–ö–∞—Ñ–µ–¥—Ä–∞:</b> {data['department']}\n\n"
                         f"<b>–ö—É—Ä—Å:</b> {data['course']}\n\n"
                         f"<b>–ì—Ä—É–ø–ø–∞:</b> {data['group']}\n\n"
                         f"<b>–ö—É—Ä—Å–æ–≤—ã–µ:</b> {data['coursework']}\n\n"
                         f"<b>–ó–Ω–∞–Ω–∏—è:</b> {data['knowledge']}\n\n", parse_mode='HTML')
    student = register_student(message.from_user.id, data)
    if student:
        await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞.\n\n'
                             f'–ü–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.', parse_mode='HTML',
                             reply_markup=ikb_3)
    await state.finish()



def register_handlers_registration(dp: Dispatcher):
    dp.register_message_handler(registration_command, commands=['student'])
    dp.register_callback_query_handler(cont_command, text='continue', state="*")
    dp.register_message_handler(get_student_name, state=Student.student_name)
    dp.register_message_handler(get_university, state=Student.university)
    dp.register_message_handler(get_faculty, state=Student.faculty)
    dp.register_message_handler(get_specialties, state=Student.specialties)
    dp.register_message_handler(get_department, state=Student.department)
    dp.register_message_handler(get_course, state=Student.course)
    dp.register_message_handler(get_group, state=Student.group)
    dp.register_message_handler(get_coursework, state=Student.coursework)
    dp.register_message_handler(get_knowledge, state=Student.knowledge)
    dp.register_callback_query_handler(back_func, text='back', state="*")
